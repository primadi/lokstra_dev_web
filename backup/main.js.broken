// Lokstra Framework Website - Main JavaScript

// Global variables to prevent duplicate event listeners
let mobileNavInitialized = false;

// Mobile navigation functionality
function initMobileNav() {
  // Prevent multiple initializations
  if (mobileNavInitialized) return;
  
  const navToggle = document.querySelector(".nav-toggle");
  const navLinks = document.querySelector(".nav-links");
  const navOverlay = document.querySelector(".nav-overlay");
  const body = document.body;

  if (!navToggle || !navLinks) return;

  function toggleMobileMenu() {
    const isActive = navLinks.classList.contains("active");
    if (isActive) {
      closeMobileMenu();
    } else {
      openMobileMenu();
    }
  }

  function openMobileMenu() {
    navLinks.classList.add("active");
    if (navOverlay) navOverlay.classList.add("active");
    body.classList.add("menu-open");
    navToggle.innerHTML = "✕";
  }

  function closeMobileMenu() {
    navLinks.classList.remove("active");
    if (navOverlay) navOverlay.classList.remove("active");
    body.classList.remove("menu-open");
    navToggle.innerHTML = "☰";
  }

  // Toggle mobile menu
  navToggle.addEventListener("click", (e) => {
    e.preventDefault();
    e.stopPropagation();
    toggleMobileMenu();
  });

  // Close menu when clicking on overlay
  if (navOverlay) {
    navOverlay.addEventListener("click", () => {
      closeMobileMenu();
    });
  }

  // Close menu with escape key
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      closeMobileMenu();
    }
  });

  // Close menu when clicking on a link
  document.querySelectorAll(".nav-links a").forEach((link) => {
    link.addEventListener("click", (e) => {
      // Only handle internal links (not external)
      const href = link.getAttribute("href");
      if (href && !href.startsWith("http")) {
        e.preventDefault();
        closeMobileMenu();
        spaNavigate(href);
      } else {
        // For external links, just close the menu
        closeMobileMenu();
      }
    });
  });

  // Ensure menu is closed on window resize
  window.addEventListener("resize", () => {
    if (window.innerWidth > 768) {
      closeMobileMenu();
    }
  });

  mobileNavInitialized = true;
}
      // SPA navigation: load page content and update history
      // SPA navigation: load page content and update history (supports hash routing)
      async function spaNavigate(route, isPopState) {
        // Normalize route from hash or href
        let page = route
          .replace(/^\/?(partials\/)?/, "")
          .replace(/\/.*/, "")
          .replace("#", "")
          .replace("?", "");

        let isHome = false;
        if (
          !page ||
          page === "" ||
          page === "index.html" ||
          page === "/" ||
          page === "home"
        ) {
          page = "index.html";
          isHome = true;
        }
        if (!page.endsWith(".html")) page += ".html";
        let metaFile = "./assets/meta-base.html";
        if (page === "about.html") metaFile = "./assets/meta-about.html";
        else if (page === "architecture.html")
          metaFile = "./assets/meta-architecture.html";
        else if (isHome) metaFile = "./assets/meta-home.html";

        // Load meta tags and main content
        await loadMetaTags("./assets/meta-base.html", metaFile);
        await loadHTML("navbar-container", "./assets/navbar.html");
        await loadHTML("footer-container", "./assets/footer.html");

        // Always load content from partials
        if (isHome) {
          await loadHTML("main-content", "./partials/home.html");
        } else {
          await loadHTML("main-content", `./partials/${page}`);
        }

        // Update active nav link
        setTimeout(() => {
          const navLinks_a = document.querySelectorAll(".nav-links a");
          navLinks_a.forEach((link) => {
            link.classList.remove("active");
            const linkHref = link.getAttribute("href");
            if (linkHref) {
              if (
                isHome &&
                (linkHref === "index.html" ||
                  linkHref === "./index.html" ||
                  linkHref === "/")
              ) {
                link.classList.add("active");
              } else if (
                !isHome &&
                linkHref.replace("./", "") === page.replace("./", "")
              ) {
                link.classList.add("active");
              }
            }
          });
        }, 200);

        // Update hash if not popstate
        if (!isPopState) {
          if (isHome) {
            window.location.hash = "";
          } else {
            window.location.hash = page.replace(".html", "");
          }
        }
      }

      // Hash-based routing: load correct partial on hash change
      window.addEventListener("hashchange", function () {
        const hash = window.location.hash.replace(/^#\/?/, "");
        spaNavigate(hash, true);
      });

      // On initial load, check hash and load correct partial
      document.addEventListener("DOMContentLoaded", function () {
        const hash = window.location.hash.replace(/^#\/?/, "");
        if (hash) {
          spaNavigate(hash, true);
        }
      });

      // Close menu with escape key
      document.onkeydown = function (e) {
        if (e.key === "Escape") closeMobileMenu();
      };

      function toggleMobileMenu() {
        const isActive = navLinks.classList.contains("active");
        if (isActive) {
          closeMobileMenu();
        } else {
          openMobileMenu();
        }
      }

      function openMobileMenu() {
        navLinks.classList.add("active");
        if (navOverlay) navOverlay.classList.add("active");
        body.classList.add("menu-open");
        newNavToggle.innerHTML = "✕";
      }

      function closeMobileMenu() {
        navLinks.classList.remove("active");
        if (navOverlay) navOverlay.classList.remove("active");
        body.classList.remove("menu-open");
        newNavToggle.innerHTML = "☰";
      }

      // Ensure menu is closed on window resize
      window.addEventListener("resize", () => {
        if (window.innerWidth > 768) {
          closeMobileMenu();
        }
      });
    }
  };

  // First initialization after DOMContentLoaded
  document.addEventListener("DOMContentLoaded", function () {
    setTimeout(window.initMobileNav, 100);
  });

  // Set active navigation link based on current page (with delay for navbar loading)
  setTimeout(() => {
    const currentPage =
      window.location.pathname.split("/").pop() || "index.html";
    const navLinks_a = document.querySelectorAll(".nav-links a");

    navLinks_a.forEach((link) => {
      link.classList.remove("active");
      const href = link.getAttribute("href");
      if (
        href === currentPage ||
        (currentPage === "" && href === "index.html") ||
        (currentPage === "index.html" && href === "index.html") ||
        (currentPage === "about.html" && href === "about.html") ||
        (currentPage === "architecture.html" && href === "architecture.html") ||
        (currentPage === "blog.html" && href === "blog.html")
      ) {
        link.classList.add("active");
      }
    });
  }, 200);
});

// Utility function to load meta tags
async function loadMetaTags(baseMeta, pageMeta) {
  try {
    // Load base meta tags first
    const baseResponse = await fetch(baseMeta);
    if (baseResponse.ok) {
      const baseMetaHTML = await baseResponse.text();
      document.head.insertAdjacentHTML("afterbegin", baseMetaHTML);
    }

    // Then load page-specific meta tags
    const pageResponse = await fetch(pageMeta);
    if (pageResponse.ok) {
      const pageMetaHTML = await pageResponse.text();
      document.head.insertAdjacentHTML("afterbegin", pageMetaHTML);
    }
  } catch (error) {
    console.warn(`Error loading meta tags:`, error);
  }
}

// Utility function to load HTML content
async function loadHTML(elementId, filePath) {
  try {
    const response = await fetch(filePath);
    if (response.ok) {
      const html = await response.text();
      const element = document.getElementById(elementId);
      if (element) {
        element.innerHTML = html;
      }
    } else {
      console.warn(`Could not load ${filePath}`);
    }
  } catch (error) {
    console.warn(`Error loading ${filePath}:`, error);
  }
}
