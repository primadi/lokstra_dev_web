{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://lokstra.dev/schema/lokstra.json",
  "title": "Lokstra Configuration Schema",
  "description": "JSON Schema for Lokstra framework YAML configuration files",
  "type": "object",
  "properties": {
    "server": {
      "$ref": "#/definitions/ServerConfig"
    },
    "apps": {
      "type": "array",
      "description": "List of applications to run",
      "items": {
        "$ref": "#/definitions/AppConfig"
      }
    },
    "services": {
      "type": "array",
      "description": "List of services to create and configure",
      "items": {
        "$ref": "#/definitions/ServiceConfig"
      }
    },
    "modules": {
      "type": "array",
      "description": "List of modules to load",
      "items": {
        "$ref": "#/definitions/ModuleConfig"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "ServerConfig": {
      "type": "object",
      "description": "Server-level configuration",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the server instance",
          "default": "default"
        },
        "global_setting": {
          "type": "object",
          "description": "Global settings for the server",
          "properties": {
            "log_level": {
              "anyOf": [
                {
                  "type": "string",
                  "enum": ["trace", "debug", "info", "warn", "error", "fatal", "panic"]
                },
                {
                  "type": "string",
                  "pattern": "^\\$\\{[A-Z_][A-Z0-9_]*:(trace|debug|info|warn|error|fatal|panic)\\}$"
                }
              ],
              "default": "info",
              "description": "Global log level - supports standard levels (trace, debug, info, warn, error, fatal, panic) or environment variable format ${VAR_NAME:default_level}",
              "examples": ["info", "debug", "${LOG_LEVEL:info}", "${ENV_LOG_LEVEL:warn}", "${APP_LOG_LEVEL:error}"]
            },
            "log_format": {
              "type": "string",
              "description": "Log output format",
              "enum": ["json", "text", "console"],
              "default": "json"
            },
            "log_output": {
              "type": "string",
              "description": "Log output destination",
              "enum": ["stdout", "stderr"],
              "default": "stdout"
            },
            "handler_dbPool": {
              "type": "string",
              "description": "default database connection pool name for handler",
              "default": "default_dbpool"
            },
            "flow_dbPool": {
              "type": "string",
              "description": "default database connection pool name for flow",
              "default": "default_dbpool"
            },
            "flow_logger": {
              "type": "string",
              "description": "default logger service name for flow",
              "default": "logger"
            },
            "flow_dbschema": {
              "type": "string",
              "description": "default database schema name for flow",
              "default": "default_dbschema"
            }
          },
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "AppConfig": {
      "type": "object",
      "description": "Application configuration",
      "required": ["name", "address"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name for the application"
        },
        "address": {
          "type": "string",
          "description": "Address to bind to (e.g., ':8080', 'localhost:3000', 'unix:///tmp/app.sock')",
          "examples": [":8080", "localhost:3000", "unix:///tmp/app.sock"]
        },
        "listener_type": {
          "type": "string",
          "description": "Type of HTTP listener to use",
          "enum": ["default", "nethttp", "fasthttp", "http3", "secure"],
          "default": "default"
        },
        "router_engine_type": {
          "type": "string",
          "description": "Type of router engine to use", 
          "enum": ["default", "httprouter", "servemux", "gin", "chi"],
          "default": "default"
        },
        "setting": {
          "type": "object",
          "description": "Application-specific settings",
          "additionalProperties": true
        },
        "groups": {
          "type": "array",
          "description": "Route groups with prefixes and middleware",
          "items": {
            "$ref": "internal-router.json#/definitions/GroupConfig"
          }
        },
        "routes": {
          "type": "array",
          "description": "Direct routes on the application",
          "items": {
            "$ref": "internal-router.json#/definitions/RouteConfig"
          }
        },
        "middleware": {
          "$ref": "internal-middleware.json#/definitions/MiddlewareList"
        },
        "mount_static": {
          "type": "array",
          "description": "Static file mount points",
          "items": {
            "$ref": "internal-router.json#/definitions/MountStaticConfig"
          }
        },
        "mount_htmx": {
          "type": "array",
          "description": "HTMX Application mount points",
          "items": {
            "$ref": "internal-router.json#/definitions/MountHtmxConfig"
          }
        },
        "mount_reverse_proxy": {
          "type": "array",
          "description": "Reverse proxy mount points",
          "items": {
            "$ref": "internal-router.json#/definitions/MountReverseProxyConfig"
          }
        }
      },
      "additionalProperties": false
    },
    "ServiceConfig": {
      "type": "object",
      "description": "Service configuration",
      "required": ["name", "type"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique service instance name"
        },
        "type": {
          "type": "string",
          "description": "Service factory type",
          "examples": ["lokstra.logger", "lokstra.dbpool_pg", "lokstra.redis", "lokstra.jwt_auth"]
        },
        "config": {
          "type": "object",
          "description": "Service-specific configuration",
          "additionalProperties": true
        },
        "depends_on": {
          "type": "array",
          "description": "List of service names this service depends on",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": { "const": "lokstra.dbpool_pg" }
            }
          },
          "then": {
            "properties": {
              "config": {
                "type": "object",
                "description": "PostgreSQL connection pool configuration",
                "properties": {
                  "dsn": {
                    "type": "string",
                    "description": "Complete PostgreSQL Data Source Name (DSN) connection string",
                    "examples": ["postgres://username:password@host:port/database?sslmode=require"]
                  },
                  "host": {
                    "type": "string",
                    "description": "PostgreSQL server hostname or IP address",
                    "default": "localhost",
                    "examples": ["localhost", "db.example.com", "127.0.0.1"]
                  },
                  "port": {
                    "type": "string",
                    "description": "PostgreSQL server port number",
                    "default": "5432"
                  },
                  "database": {
                    "type": "string",
                    "description": "PostgreSQL database name",
                    "examples": ["myapp", "production_db", "lokstra_db"]
                  },
                  "username": {
                    "type": "string",
                    "description": "PostgreSQL username for authentication",
                    "examples": ["postgres", "dbuser", "app_user"]
                  },
                  "password": {
                    "type": "string",
                    "description": "PostgreSQL password for authentication"
                  },
                  "min_connections": {
                    "type": "integer",
                    "description": "Minimum number of connections to maintain in the pool",
                    "minimum": 0,
                    "default": 2,
                    "examples": [1, 2, 5]
                  },
                  "max_connections": {
                    "type": "integer",
                    "description": "Maximum number of connections allowed in the pool",
                    "minimum": 1,
                    "default": 10,
                    "examples": [10, 20, 50, 100]
                  },
                  "max_idle_time": {
                    "type": "string",
                    "description": "Maximum time a connection can remain idle before being closed (Go duration format)",
                    "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                    "default": "30m",
                    "examples": ["5m", "30m", "1h", "2h30m"]
                  },
                  "max_lifetime": {
                    "type": "string",
                    "description": "Maximum lifetime of a connection before being recreated (Go duration format)",
                    "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                    "default": "1h",
                    "examples": ["30m", "1h", "2h", "24h"]
                  },
                  "ssl_mode": {
                    "type": "string",
                    "description": "PostgreSQL SSL connection mode (alternative naming)",
                    "enum": ["disable", "allow", "prefer", "require", "verify-ca", "verify-full"],
                    "default": "disable",
                    "examples": ["disable", "allow", "prefer", "require", "verify-ca", "verify-full"]
                  }
                },
                "anyOf": [
                  {
                    "required": ["dsn"],
                    "description": "Use complete DSN connection string"
                  },
                  {
                    "required": ["host", "database", "username"],
                    "description": "Use individual connection parameters"
                  }
                ],
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "lokstra.redis" }
            }
          },
          "then": {
            "properties": {
              "config": {
                "type": "object",
                "description": "Redis connection configuration",
                "properties": {
                  "dsn": {
                    "type": "string",
                    "description": "Complete Redis Data Source Name (DSN) connection string",
                    "examples": [
                      "redis://localhost:6379",
                      "redis://:password@localhost:6379/1",
                      "redis://username:password@localhost:6379/0",
                      "rediss://user:pass@localhost:6380/1?dial_timeout=3&db=1&read_timeout=6s&max_retries=2",
                      "unix://user:pass@/path/to/redis.sock?db=3"
                    ]
                  },
                  "addr": {
                    "type": "string",
                    "description": "Redis server address (host:port)",
                    "default": "localhost:6379",
                    "examples": ["localhost:6379", "redis.example.com:6379", "127.0.0.1:6379"]
                  },
                  "host": {
                    "type": "string", 
                    "description": "Redis server hostname or IP address",
                    "default": "localhost",
                    "examples": ["localhost", "redis.example.com", "127.0.0.1"]
                  },
                  "port": {
                    "type": "integer",
                    "description": "Redis server port number",
                    "minimum": 1,
                    "maximum": 65535,
                    "default": 6379
                  },
                  "password": {
                    "type": "string",
                    "description": "Redis authentication password"
                  },
                  "db": {
                    "type": "integer",
                    "description": "Redis database number",
                    "minimum": 0,
                    "maximum": 15,
                    "default": 0
                  }
                },
                "anyOf": [
                  {
                    "required": ["dsn"],
                    "description": "Use complete DSN connection string"
                  },
                  {
                    "required": ["addr"],
                    "description": "Use addr (host:port) format"
                  },
                  {
                    "required": ["host"],
                    "description": "Use individual host parameter"
                  }
                ],
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "lokstra.logger" }
            }
          },
          "then": {
            "properties": {
              "config": {
                "type": "object",
                "description": "Logger configuration",
                "properties": {
                  "level": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": ["trace", "debug", "info", "warn", "error", "fatal", "panic"]
                      },
                      {
                        "type": "string",
                        "pattern": "^\\$\\{[A-Z_][A-Z0-9_]*:(trace|debug|info|warn|error|fatal|panic)\\}$"
                      }
                    ],
                    "default": "info",
                    "description": "Log level - supports standard levels (trace, debug, info, warn, error, fatal, panic) or environment variable format ${VAR_NAME:default_level}",
                    "examples": ["info", "debug", "${LOG_LEVEL:info}", "${ENV_LOG_LEVEL:warn}", "${APP_LOG_LEVEL:error}"]
                  },
                  "format": {
                    "type": "string",
                    "description": "Log output format",
                    "enum": ["json", "text", "console"],
                    "default": "json"
                  },
                  "output": {
                    "type": "string",
                    "description": "Log output destination",
                    "enum": ["stdout", "stderr"],
                    "default": "stdout"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "lokstra.metrics" }
            }
          },
          "then": {
            "properties": {
              "config": {
                "type": "object",
                "description": "Metrics collection and reporting configuration",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable metrics collection",
                    "default": true
                  },
                  "endpoint": {
                    "type": "string",
                    "description": "Metrics endpoint path",
                    "default": "/metrics",
                    "examples": ["/metrics", "/prometheus", "/stats"]
                  },
                  "namespace": {
                    "type": "string",
                    "description": "Metrics namespace prefix",
                    "examples": ["app", "service", "lokstra"]
                  },
                  "subsystem": {
                    "type": "string",
                    "description": "Metrics subsystem name",
                    "examples": ["http", "db", "cache"]
                  },
                  "buckets": {
                    "type": "array",
                    "description": "Histogram buckets for duration metrics",
                    "items": {
                      "type": "number"
                    },
                    "examples": [[0.1, 0.3, 1.2, 5.0]]
                  },
                  "labels": {
                    "type": "object",
                    "description": "Additional labels to add to all metrics",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "collect_interval": {
                    "type": "string",
                    "description": "Interval for collecting metrics",
                    "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                    "default": "15s",
                    "examples": ["10s", "15s", "30s", "1m"]
                  },
                  "host": {
                    "type": "string",
                    "description": "Host to bind metrics HTTP server (if serving via separate server)",
                    "default": "localhost",
                    "examples": ["localhost", "0.0.0.0", "127.0.0.1"]
                  },
                  "port": {
                    "type": "integer",
                    "description": "Port for metrics HTTP server (if serving via separate server)",
                    "minimum": 1,
                    "maximum": 65535,
                    "examples": [9090, 8080, 3000]
                  },
                  "timeout": {
                    "type": "string",
                    "description": "Timeout for metrics collection operations",
                    "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                    "default": "10s",
                    "examples": ["5s", "10s", "30s"]
                  },
                  "include_go_metrics": {
                    "type": "boolean",
                    "description": "Whether to include Go runtime metrics",
                    "default": true
                  },
                  "include_process_metrics": {
                    "type": "boolean",
                    "description": "Whether to include process metrics",
                    "default": true
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "lokstra.i18n" }
            }
          },
          "then": {
            "properties": {
              "config": {
                "type": "object",
                "description": "Internationalization (i18n) configuration",
                "properties": {
                  "default_language": {
                    "type": "string",
                    "description": "Default language code",
                    "default": "en",
                    "examples": ["en", "id", "zh", "ja", "es", "fr"]
                  },
                  "supported_languages": {
                    "type": "array",
                    "description": "List of supported language codes",
                    "items": {
                      "type": "string"
                    },
                    "examples": [["en", "id"], ["en", "zh", "ja"]]
                  },
                  "messages_path": {
                    "type": "string",
                    "description": "Path to translation message files",
                    "default": "./locales",
                    "examples": ["./locales", "./translations", "/app/messages"]
                  },
                  "format": {
                    "type": "string",
                    "description": "Translation file format",
                    "enum": ["json", "yaml", "toml"],
                    "default": "json"
                  },
                  "fallback_language": {
                    "type": "string",
                    "description": "Fallback language when translation is missing",
                    "default": "en",
                    "examples": ["en", "id"]
                  },
                  "auto_reload": {
                    "type": "boolean",
                    "description": "Whether to automatically reload translation files on change",
                    "default": false
                  },
                  "case_sensitive": {
                    "type": "boolean",
                    "description": "Whether translation keys are case sensitive",
                    "default": true
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "lokstra.jwt_auth" }
            }
          },
          "then": {
            "properties": {
              "config": {
                "type": "object",
                "description": "JWT authentication configuration",
                "properties": {
                  "secret": {
                    "type": "string",
                    "description": "JWT signing secret key (required for HMAC algorithms)"
                  },
                  "algorithm": {
                    "type": "string",
                    "description": "JWT signing algorithm",
                    "enum": ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "ES256", "ES384", "ES512"],
                    "default": "HS256"
                  },
                  "expires_in": {
                    "type": "string",
                    "description": "Token expiration time (Go duration format)",
                    "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                    "default": "24h",
                    "examples": ["1h", "24h", "7d", "30d"]
                  },
                  "refresh_expires_in": {
                    "type": "string",
                    "description": "Refresh token expiration time (Go duration format)",
                    "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                    "default": "168h",
                    "examples": ["7d", "30d", "168h"]
                  },
                  "issuer": {
                    "type": "string",
                    "description": "JWT issuer (iss claim)",
                    "examples": ["myapp", "api.example.com"]
                  },
                  "audience": {
                    "type": "string",
                    "description": "JWT audience (aud claim)",
                    "examples": ["web", "mobile", "api"]
                  },
                  "public_key_path": {
                    "type": "string",
                    "description": "Path to public key file (required for RSA/ECDSA algorithms)",
                    "examples": ["./keys/public.pem", "/etc/ssl/jwt-public.key"]
                  },
                  "private_key_path": {
                    "type": "string",
                    "description": "Path to private key file (required for RSA/ECDSA algorithms)",
                    "examples": ["./keys/private.pem", "/etc/ssl/jwt-private.key"]
                  },
                  "token_header": {
                    "type": "string",
                    "description": "HTTP header name for token",
                    "default": "Authorization",
                    "examples": ["Authorization", "X-Auth-Token", "Bearer"]
                  },
                  "token_prefix": {
                    "type": "string",
                    "description": "Token prefix in header",
                    "default": "Bearer ",
                    "examples": ["Bearer ", "Token ", "JWT "]
                  },
                  "skip_paths": {
                    "type": "array",
                    "description": "Paths to skip JWT authentication",
                    "items": {
                      "type": "string"
                    },
                    "examples": [["/login", "/register", "/health"], ["/public/*", "/api/v1/auth/*"]]
                  }
                },
                "anyOf": [
                  {
                    "required": ["secret"],
                    "description": "HMAC-based JWT using secret key"
                  },
                  {
                    "required": ["public_key_path", "private_key_path"],
                    "description": "RSA/ECDSA-based JWT using key files"
                  }
                ],
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "lokstra.http_listener" }
            }
          },
          "then": {
            "properties": {
              "config": {
                "type": "object",
                "description": "HTTP server listener configuration",
                "properties": {
                  "addr": {
                    "type": "string",
                    "description": "Server bind address (host:port)",
                    "default": ":8080",
                    "examples": [":8080", "localhost:3000", "0.0.0.0:8080", "127.0.0.1:9000"]
                  },
                  "host": {
                    "type": "string",
                    "description": "Server bind hostname or IP address",
                    "default": "",
                    "examples": ["localhost", "0.0.0.0", "127.0.0.1"]
                  },
                  "port": {
                    "type": "integer",
                    "description": "Server bind port number",
                    "minimum": 1,
                    "maximum": 65535,
                    "default": 8080,
                    "examples": [3000, 8080, 9000]
                  },
                  "read_timeout": {
                    "type": "string",
                    "description": "Maximum duration for reading the entire request",
                    "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                    "default": "10s",
                    "examples": ["5s", "10s", "30s"]
                  },
                  "write_timeout": {
                    "type": "string",
                    "description": "Maximum duration before timing out writes of the response",
                    "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                    "default": "10s",
                    "examples": ["5s", "10s", "30s"]
                  },
                  "idle_timeout": {
                    "type": "string",
                    "description": "Maximum amount of time to wait for the next request when keep-alives are enabled",
                    "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                    "default": "60s",
                    "examples": ["30s", "60s", "120s"]
                  },
                  "max_header_bytes": {
                    "type": "integer",
                    "description": "Maximum number of bytes the server will read parsing the request header",
                    "minimum": 1024,
                    "default": 1048576,
                    "examples": [1048576, 2097152, 4194304]
                  },
                  "shutdown_timeout": {
                    "type": "string",
                    "description": "Maximum duration to wait for graceful shutdown",
                    "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                    "default": "30s",
                    "examples": ["15s", "30s", "60s"]
                  },
                  "tls": {
                    "type": "object",
                    "description": "TLS/SSL configuration",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Whether to enable TLS",
                        "default": false
                      },
                      "cert_file": {
                        "type": "string",
                        "description": "Path to TLS certificate file",
                        "examples": ["./certs/server.crt", "/etc/ssl/certs/server.pem"]
                      },
                      "key_file": {
                        "type": "string",
                        "description": "Path to TLS private key file",
                        "examples": ["./certs/server.key", "/etc/ssl/private/server.key"]
                      },
                      "min_version": {
                        "type": "string",
                        "description": "Minimum TLS version",
                        "enum": ["1.0", "1.1", "1.2", "1.3"],
                        "default": "1.2"
                      },
                      "max_version": {
                        "type": "string",
                        "description": "Maximum TLS version",
                        "enum": ["1.0", "1.1", "1.2", "1.3"],
                        "default": "1.3"
                      },
                      "cipher_suites": {
                        "type": "array",
                        "description": "List of supported cipher suites",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "cors": {
                    "type": "object",
                    "description": "CORS (Cross-Origin Resource Sharing) configuration",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Whether to enable CORS",
                        "default": false
                      },
                      "allowed_origins": {
                        "type": "array",
                        "description": "List of allowed origins",
                        "items": {
                          "type": "string"
                        },
                        "examples": [["*"], ["http://localhost:3000", "https://app.example.com"]]
                      },
                      "allowed_methods": {
                        "type": "array",
                        "description": "List of allowed HTTP methods",
                        "items": {
                          "type": "string"
                        },
                        "default": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
                        "examples": [["GET", "POST"], ["GET", "POST", "PUT", "DELETE", "PATCH"]]
                      },
                      "allowed_headers": {
                        "type": "array",
                        "description": "List of allowed headers",
                        "items": {
                          "type": "string"
                        },
                        "examples": [["Content-Type", "Authorization"], ["*"]]
                      },
                      "exposed_headers": {
                        "type": "array",
                        "description": "List of headers exposed to the client",
                        "items": {
                          "type": "string"
                        }
                      },
                      "allow_credentials": {
                        "type": "boolean",
                        "description": "Whether to allow credentials",
                        "default": false
                      },
                      "max_age": {
                        "type": "integer",
                        "description": "How long the browser can cache preflight requests (in seconds)",
                        "default": 86400
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "lokstra.ui_renderer" }
            }
          },
          "then": {
            "properties": {
              "config": {
                "type": "object",
                "description": "UI Renderer service configuration for modern web UI generation",
                "properties": {
                  "template_dir": {
                    "type": "string",
                    "description": "Directory containing HTML templates",
                    "default": "services/ui_renderer/templates",
                    "examples": ["./templates", "services/ui_renderer/templates", "/app/templates"]
                  },
                  "theme": {
                    "type": "string",
                    "description": "Default UI theme",
                    "enum": ["light", "dark", "auto"],
                    "default": "light"
                  },
                  "preline_version": {
                    "type": "string",
                    "description": "Preline UI library version to use",
                    "default": "2.0.0",
                    "examples": ["2.0.0", "1.9.0", "latest"]
                  },
                  "tailwind_config": {
                    "type": "object",
                    "description": "Tailwind CSS configuration overrides",
                    "properties": {
                      "content": {
                        "type": "array",
                        "description": "Content paths for Tailwind to scan",
                        "items": {
                          "type": "string"
                        },
                        "default": ["./templates/**/*.html", "./static/**/*.js"]
                      },
                      "theme": {
                        "type": "object",
                        "description": "Theme configuration",
                        "additionalProperties": true
                      }
                    },
                    "additionalProperties": true
                  },
                  "htmx_config": {
                    "type": "object",
                    "description": "HTMX configuration options",
                    "properties": {
                      "version": {
                        "type": "string",
                        "description": "HTMX library version",
                        "default": "1.9.0"
                      },
                      "global_config": {
                        "type": "object",
                        "description": "Global HTMX configuration",
                        "properties": {
                          "timeout": {
                            "type": "integer",
                            "description": "Default request timeout in milliseconds",
                            "default": 0
                          },
                          "history_cache_size": {
                            "type": "integer",
                            "description": "Size of history cache",
                            "default": 10
                          }
                        }
                      }
                    },
                    "additionalProperties": true
                  },
                  "alpine_config": {
                    "type": "object",
                    "description": "Alpine.js configuration options",
                    "properties": {
                      "version": {
                        "type": "string",
                        "description": "Alpine.js library version",
                        "default": "3.13.0"
                      },
                      "plugins": {
                        "type": "array",
                        "description": "Alpine.js plugins to load",
                        "items": {
                          "type": "string"
                        },
                        "examples": [["focus", "mask"], ["intersect", "persist"]]
                      }
                    },
                    "additionalProperties": true
                  },
                  "cache_templates": {
                    "type": "boolean",
                    "description": "Whether to cache parsed templates",
                    "default": true
                  },
                  "hot_reload": {
                    "type": "boolean",
                    "description": "Enable hot reload of templates in development",
                    "default": false
                  },
                  "minify_output": {
                    "type": "boolean",
                    "description": "Whether to minify HTML output",
                    "default": false
                  },
                  "component_dirs": {
                    "type": "array",
                    "description": "Additional directories to scan for components",
                    "items": {
                      "type": "string"
                    },
                    "examples": [["./components", "./widgets"], ["./shared/components"]]
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      ],
      "additionalProperties": false
    },
    "ModuleConfig": {
      "type": "object",
      "description": "Module configuration for loading external modules",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique module name"
        },
        "path": {
          "type": "string",
          "description": "Path to the module file (e.g., './plugins/user_module.so'). Optional - if not provided, this will be a configuration-only module."
        },
        "entry": {
          "type": "string",
          "description": "Entry point function name in the module"
        },
        "settings": {
          "type": "object",
          "description": "Module-specific settings",
          "additionalProperties": true
        },
        "permissions": {
          "type": "object",
          "description": "Module permissions configuration",
          "additionalProperties": true
        },
        "required_services": {
          "type": "array",
          "description": "List of service names required by this module",
          "items": {
            "type": "string"
          }
        },
        "create_services": {
          "type": "array",
          "description": "Services to be created by this module",
          "items": {
            "$ref": "#/definitions/ServiceConfig"
          }
        },
        "register_service_factories": {
          "type": "array",
          "description": "Service factory method names to register",
          "items": {
            "type": "string"
          }
        },
        "register_handlers": {
          "type": "array",
          "description": "Handler method names to register",
          "items": {
            "type": "string"
          }
        },
        "register_middleware": {
          "type": "array",
          "description": "Middleware method names to register",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}